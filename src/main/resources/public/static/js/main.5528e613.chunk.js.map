{"version":3,"sources":["modules/abalon-game/AbalonGameConstants.js","modules/abalon-game/AbalonBoardTile.js","modules/abalon-game/AbalonBoard.js","modules/abalon-game/AbalonGame.js","abalon-api/abalonServer.js","components/BoardGame/BoardGame.jsx","reducers/abalonGame/abalonGameActions.js","reducers/abalonGame/abalonGameTypes.js","constants.js","reducers/abalonGame/abalonGameReducer.js","components/AbalonGamePage/initialBoardState.js","components/AbalonGamePage/AbalonGamePage.jsx","components/StartPage/StartPage.jsx","App.js","serviceWorker.js","index.js","assets/empty-marked.png","assets/black-ball.png","assets/black-marked.png","assets/black-ball-light-yellow.png","assets/white-ball.png","assets/white-marked.png","assets/white-ball-light-yellow.png","assets/back-board.jpg","assets/instructions.png","assets/instructions2.png"],"names":["Players","Black","White","TileContent","BlackSoldier","WhiteSoldier","Empty","BlackSoldierMarkedAction","WhiteSoldierMarkedAction","EmptyMarkedAction","BlackSoldierMarkedSelection","WhiteSoldierMarkedSelection","AbalonBoardTile","content","this","includes","mathFunction","num","AbalonBoard","initialValues","boardMat","rowIndex","row","Array","columnIndex","initTileState","find","x","column","tile","length","push","boardState","i","rowState","j","AbalonGame","initialBoardState","turn","board","getTile","setTile","promiseTimeout","ms","promise","timeout","Promise","resolve","reject","id","setTimeout","clearTimeout","race","turnConverter","turnConverterToEnum","player","boardStateConverter","getBoardState","tileState","isBlackSoldier","soldier","isWhiteSoldier","soldierToTile","boardStateConverterToObj","square","BoardGame","props","againstAI","useContext","AbalonGameContext","abalonGameState","abalonGameDispatch","useImage","blackBallURL","blackBallImage","whiteBallURL","whiteBallImage","blackBallYellowURL","blackBallYellowImage","whiteBallYellowURL","whiteBallYellowImage","backBoardURL","backBoardImage","emptyMarkedURL","emptyMarkedImage","whiteBallMarkedURL","whiteBallMarkedImage","blackBallMarkedURL","blackBallMarkedImage","enqueueSnackbar","useSnackbar","useState","winnerAlreadyAnnounced","setWinnerAlreadyAnnounced","selectedTileState","abalonGame","tileToImage","handleTileClick","e","position","msTimeout","data","currentTurn","currentPos","fetch","method","headers","body","JSON","stringify","then","resp","json","catch","err","getPossibleNextMoves","nextMovesPositions","type","payload","gameFirstSelection","variant","pos","sourcePosition","destPosition","commitMove","newAbalonBoard","gameCommitMove","useEffect","text","checkWinner","isAITurn","getMoveFromAI","gameAICommitMove","width","height","image","map","mathFunction2","y","tilePositionToCoordinates","key","onClick","onMouseEnter","document","style","cursor","onMouseLeave","Box","display","flexDirection","justifyContent","Typography","marginRight","CircularProgress","color","AppRoutes","objectShallowClone","obj","prototype","Object","copyObj","create","assign","abalonGameInit","abalonGameReducer","state","action","abalonGameCopy","markTileSelected","markTileAction","unmarkTileSelected","unmarkTileAction","switchTurn","initialTiles","React","createContext","useStyles","makeStyles","theme","pageTitle","fontFamily","turnHeader","fontSize","right","appBar","alignItems","containerBox","boxButton","background","marginTop","marginBottom","AbalonGamePage","useReducer","classes","Provider","value","className","flexGrow","Divider","boxTitle","boxSubHeader","boxContent","borderWidth","borderRadius","borderColor","borderStyle","paddingTop","paddingBottom","paddingLeft","paddingRight","StartPage","isInstructionsDialogOpen","setIsInstructionsDialogOpen","Dialog","fullScreen","onClose","aria-labelledby","open","Button","src","instructionsURL","instructions2URL","getElementById","click","to","App","maxSnack","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5528e613.chunk.js","sourcesContent":["\r\nconst Players = {\r\n    Black: \"BLACK_PLAYER\",\r\n    White: \"WHITE_PLAYER\"\r\n}\r\n\r\nconst TileContent = {\r\n    BlackSoldier: \"BlackSoldier\",\r\n    WhiteSoldier: \"WhiteSoldier\",\r\n    Empty: \"Empty\",\r\n\r\n    BlackSoldierMarkedAction: \"BlackSoldierMarkedAction\",\r\n    WhiteSoldierMarkedAction: \"WhiteSoldierMarkedAction\",\r\n    EmptyMarkedAction: \"EmptyMarkedAction\",\r\n    \r\n    BlackSoldierMarkedSelection: \"BlackSoldierMarkedSelection\",\r\n    WhiteSoldierMarkedSelection: \"WhiteSoldierMarkedSelection\",\r\n}\r\n\r\nexport {\r\n    Players,\r\n    TileContent\r\n}","import { TileContent } from \"./AbalonGameConstants\"\r\n\r\n\r\nclass AbalonBoardTile {\r\n    /**\r\n     * \r\n     * @param {String} content \r\n     */\r\n    constructor(content) {\r\n        this.content = content\r\n    }\r\n\r\n    isBlackSoldier() {\r\n        return (\r\n            [\r\n                TileContent.BlackSoldier,\r\n                TileContent.BlackSoldierMarkedAction,\r\n                TileContent.BlackSoldierMarkedSelection,\r\n            ].includes(this.content)\r\n        )\r\n    }\r\n\r\n    isWhiteSoldier() {\r\n        return (\r\n            [\r\n                TileContent.WhiteSoldier,\r\n                TileContent.WhiteSoldierMarkedAction,\r\n                TileContent.WhiteSoldierMarkedSelection,\r\n            ].includes(this.content)\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    AbalonBoardTile\r\n}","import { AbalonBoardTile } from \"./AbalonBoardTile\"\r\nimport { TileContent } from \"./AbalonGameConstants\"\r\n\r\n/*\r\nlogic representation: \r\n\r\n1         [1, 2, 3, 4, 5]\r\n2        [1, 2, 3, 4, 5, 6]\r\n3      [1, 2, 3, 4, 5, 6, 7]\r\n4    [1, 2, 3, 4, 5, 6, 7, 8]\r\n5   [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n6    [1, 2, 3, 4, 5, 6, 7, 8]\r\n7      [1, 2, 3, 4, 5, 6, 7]\r\n8        [1, 2, 3, 4, 5, 6]\r\n9         [1, 2, 3, 4, 5]\r\n[NOTICE]\r\ninside the matrix, all the numbers above will be decremented (because arrays start at index 0)\r\n*/\r\n\r\n/**\r\n * \r\n * @param {Number} num \r\n */\r\nconst mathFunction = (num) => {\r\n    if (num >=0 && num <= 4) {\r\n        return num\r\n    } else if (num >=5 && num <= 8) {\r\n        return 8 - num\r\n    }\r\n    return 0\r\n}\r\n\r\nclass AbalonBoard {\r\n    /**\r\n     * \r\n     * @param {Array<{row: Number, column: Number, tile: AbalonBoardTile}>} initialValues \r\n     */\r\n    constructor(initialValues = []) {\r\n        /**@type {Array<Array<AbalonBoardTile>>} */\r\n        this.boardMat = []\r\n\r\n        for (let rowIndex = 0; rowIndex < 9; rowIndex++) {\r\n            const row = new Array(5 + mathFunction(rowIndex))\r\n\r\n            for (let columnIndex = 0; columnIndex < row.length; columnIndex++) {\r\n                const initTileState = initialValues.find(x => x.row === rowIndex && x.column === columnIndex)\r\n\r\n                if (initTileState) {\r\n                    row[columnIndex] = initTileState.tile\r\n                } else {\r\n                    row[columnIndex] = new AbalonBoardTile(TileContent.Empty)\r\n                }\r\n            }\r\n\r\n            this.boardMat.push(row)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @returns {AbalonBoardTile}\r\n     */\r\n    getTile(row, column) {\r\n        return this.boardMat[row][column]\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @param {String} content \r\n     */\r\n    setTile(row, column, content) {\r\n        this.boardMat[row][column] = new AbalonBoardTile(content)\r\n    }\r\n\r\n    /**\r\n     * @returns {Array<Array<{row: Number, column: Number, tile: AbalonBoardTile}>>}\r\n     */\r\n    getBoardState() {\r\n        const boardState = []\r\n\r\n        for (let i = 0; i < this.boardMat.length; i++) {\r\n            const row = this.boardMat[i];\r\n            \r\n            const rowState = []\r\n            for (let j = 0; j < row.length; j++) {\r\n                const tile = row[j];\r\n                \r\n                rowState.push({\r\n                    row: i, column: j, tile\r\n                })\r\n            }\r\n\r\n            boardState.push(rowState)\r\n        }\r\n\r\n        return boardState\r\n    }\r\n}\r\n\r\nexport {\r\n    AbalonBoard\r\n}","import { AbalonBoard } from \"./AbalonBoard\"\r\nimport { Players, TileContent } from \"./AbalonGameConstants\";\r\n\r\nclass AbalonGame {\r\n    constructor(initialBoardState = [], turn = Players.Black) {\r\n        /**@member {AbalonBoard} */\r\n        this.board = new AbalonBoard(initialBoardState)\r\n        /**@member {String} */\r\n        this.turn = turn\r\n    }\r\n\r\n    switchTurn() {\r\n        if (this.turn === Players.Black) {\r\n            this.turn = Players.White\r\n        } else if (this.turn === Players.White) {\r\n            this.turn = Players.Black\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @returns {Boolean} true if tile could be marked, otherwise false\r\n     */\r\n    markTileSelected(row, column) {\r\n        const { content } = this.board.getTile(row, column)\r\n        \r\n        switch (content) {\r\n            case TileContent.BlackSoldier:\r\n                this.board.setTile(row, column, TileContent.BlackSoldierMarkedSelection)\r\n                return true\r\n            case TileContent.WhiteSoldier:\r\n                this.board.setTile(row, column, TileContent.WhiteSoldierMarkedSelection)\r\n                return true\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @returns {Boolean} true if tile could be marked, otherwise false\r\n     */\r\n    markTileAction(row, column) {\r\n        const { content } = this.board.getTile(row, column)\r\n        \r\n        switch (content) {\r\n            case TileContent.BlackSoldier:\r\n                this.board.setTile(row, column, TileContent.BlackSoldierMarkedAction)\r\n                return true\r\n            case TileContent.WhiteSoldier:\r\n                this.board.setTile(row, column, TileContent.WhiteSoldierMarkedAction)\r\n                return true\r\n            case TileContent.Empty:\r\n                this.board.setTile(row, column, TileContent.EmptyMarkedAction)\r\n                return true\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @returns {Boolean} true if tile could be marked, otherwise false\r\n     */\r\n    unmarkTileSelected(row, column) {\r\n        const { content } = this.board.getTile(row, column)\r\n        \r\n        switch (content) {\r\n            case TileContent.BlackSoldierMarkedSelection:\r\n                this.board.setTile(row, column, TileContent.BlackSoldier)\r\n                return true\r\n            case TileContent.WhiteSoldierMarkedSelection:\r\n                this.board.setTile(row, column, TileContent.WhiteSoldier)\r\n                return true\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} row \r\n     * @param {Number} column \r\n     * @returns {Boolean} true if tile could be marked, otherwise false\r\n     */\r\n    unmarkTileAction(row, column) {\r\n        const { content } = this.board.getTile(row, column)\r\n        \r\n        switch (content) {\r\n            case TileContent.BlackSoldierMarkedAction:\r\n                this.board.setTile(row, column, TileContent.BlackSoldier)\r\n                return true\r\n            case TileContent.WhiteSoldierMarkedAction:\r\n                this.board.setTile(row, column, TileContent.WhiteSoldier)\r\n                return true\r\n            case TileContent.EmptyMarkedAction:\r\n                this.board.setTile(row, column, TileContent.Empty)\r\n                return true\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    AbalonGame\r\n}","import { AbalonBoard, Players, AbalonBoardTile, TileContent } from \"../modules/abalon-game\";\r\n\r\nconst promiseTimeout = function(ms, promise) {\r\n    // Create a promise that rejects in <ms> milliseconds\r\n    let timeout = new Promise((resolve, reject) => {\r\n        let id = setTimeout(() => {\r\n            clearTimeout(id);\r\n            reject('Timed out in '+ ms + 'ms.')\r\n        }, ms)\r\n    })\r\n  \r\n    // Returns a race between our timeout and the passed in promise\r\n    return Promise.race([\r\n        promise,\r\n        timeout\r\n    ])\r\n}\r\n\r\n//#region CONVERTERS\r\n/**\r\n *  \r\n * @param {String} turn \r\n */\r\nconst turnConverter = (turn) => {\r\n    switch (turn) {\r\n        case Players.Black: return \"BLACK\"\r\n        case Players.White: return \"WHITE\"\r\n        default: return \"\"\r\n    }\r\n}\r\n/**\r\n *  \r\n * @param {String} turn \r\n */\r\nconst turnConverterToEnum = (player) => {\r\n    switch (player) {\r\n        case \"BLACK\": return Players.Black\r\n        case \"WHITE\": return Players.White\r\n        default: return \"\"\r\n    }\r\n}\r\n/**\r\n * \r\n * @param {AbalonBoard} boardState \r\n */\r\nconst boardStateConverter = (boardState) => {\r\n    const board = []\r\n\r\n    for (const rowState of boardState.getBoardState()) {\r\n        for (const tileState of rowState) {\r\n            const { row, column, tile } = tileState\r\n            \r\n            if (tile.isBlackSoldier()) {\r\n                board.push({ row, column, soldier: \"BLACK\"})\r\n            } else if (tile.isWhiteSoldier()) {\r\n                board.push({ row, column, soldier: \"WHITE\"})\r\n            }\r\n        }\r\n    }\r\n\r\n    return board\r\n}\r\nconst soldierToTile = (soldier) => {\r\n    switch (soldier) {\r\n        case \"WHITE\": return new AbalonBoardTile(TileContent.WhiteSoldier)\r\n        case \"BLACK\": return new AbalonBoardTile(TileContent.BlackSoldier)\r\n        default: return new AbalonBoardTile(TileContent.Empty)\r\n    }\r\n}\r\n/**\r\n * \r\n * @param {Array<{row: Number, column: Number, soldier: String}>} board \r\n */\r\nconst boardStateConverterToObj = (board) => {\r\n    const initialValues = []\r\n\r\n    for (const square of board) {\r\n        const { row, column, soldier } = square\r\n\r\n        initialValues.push({\r\n            row, column, tile: soldierToTile(soldier)\r\n        })\r\n    }\r\n    return new AbalonBoard(initialValues)\r\n}\r\n//#endregion\r\n\r\n/**\r\n * \r\n * @param {Number} msTimeout \r\n * @returns {Promise}\r\n */\r\nconst connectionTest = (msTimeout = 10 * 1000) => {\r\n    return promiseTimeout(msTimeout, new Promise((resolve, reject) => {\r\n        fetch(\"/api/health\", {\r\n            method: 'GET',\r\n        })\r\n            .then(resp => resp.text())\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    }))\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} turn \r\n * @param {{row: Number, column: Number}} position \r\n * @param {AbalonBoard} boardState \r\n * @param {Number} msTimeout \r\n * @returns {Promise}\r\n */\r\nconst getPossibleNextMoves = (turn, position, boardState, msTimeout = 10 * 1000) => {\r\n    const data = {\r\n        currentTurn: turnConverter(turn),\r\n        currentPos: position,\r\n        boardState: boardStateConverter(boardState)\r\n    }\r\n\r\n    return promiseTimeout(msTimeout, new Promise((resolve, reject) => {\r\n        fetch(\"/api/abalongame/moves/all\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    }))\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} turn \r\n * @param {{row: Number, column: Number}} sourcePosition \r\n * @param {{row: Number, column: Number}} destPosition \r\n * @param {AbalonBoard} boardState \r\n * @param {Number} msTimeout \r\n * @returns {Promise<AbalonBoard>}\r\n */\r\nconst commitMove = (turn, sourcePosition, destPosition, boardState, msTimeout = 10 * 1000) => {\r\n    const data = {\r\n        currentTurn: turnConverter(turn),\r\n        sourcePosition: sourcePosition,\r\n        destPosition: destPosition,\r\n        boardState: boardStateConverter(boardState)\r\n    }\r\n\r\n    return promiseTimeout(msTimeout, new Promise((resolve, reject) => {\r\n        fetch(\"/api/abalongame/moves/execute\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                return boardStateConverterToObj(data);\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    }))\r\n}\r\n\r\n/**\r\n * \r\n * @param {AbalonBoard} boardState \r\n * @param {Boolean} againstAI\r\n * @param {Number} msTimeout \r\n */\r\nconst checkWinner = (boardState, againstAI, msTimeout = 10 * 1000) => {\r\n    const data = {\r\n        boardState: boardStateConverter(boardState),\r\n        againstAI\r\n    }\r\n\r\n    return promiseTimeout(msTimeout, new Promise((resolve, reject) => {\r\n        fetch(\"/api/abalongame/rules/winner\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => resp.text())\r\n            .then(data => turnConverterToEnum(data))\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    }))\r\n}\r\n\r\n/**\r\n * \r\n * @param {String} turn \r\n * @param {AbalonBoard} boardState \r\n * @param {Number} msTimeout \r\n * @returns {Promise<AbalonBoard>}\r\n */\r\nconst getMoveFromAI = (turn, boardState, msTimeout = 10 * 1000) => {\r\n    const data = {\r\n        currentTurn: turnConverter(turn),\r\n        boardState: boardStateConverter(boardState)\r\n    }\r\n\r\n    return promiseTimeout(msTimeout, new Promise((resolve, reject) => {\r\n        fetch(\"/api/abalongame/moves/ai\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                return boardStateConverterToObj(data);\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(err => reject(err))\r\n    }))\r\n}\r\n\r\nexport {\r\n    connectionTest,\r\n    getPossibleNextMoves,\r\n    commitMove,\r\n    checkWinner,\r\n    getMoveFromAI,\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport { blackBallURL, backBoardURL, whiteBallURL, emptyMarkedURL, blackBallYellowURL,\r\n            whiteBallYellowURL, whiteBallMarkedURL, blackBallMarkedURL } from \"../../assets\";\r\nimport { Stage, Layer, Image } from 'react-konva'\r\nimport useImage from \"use-image\";\r\nimport { AbalonGame, AbalonBoardTile, TileContent, Players } from '../../modules/abalon-game';\r\nimport { AbalonGameContext } from '../AbalonGamePage/AbalonGamePage';\r\nimport { gameFirstSelection, gameResetSelection, gameCommitMove, gameAICommitMove } from '../../reducers/abalonGame/abalonGameActions';\r\nimport { getPossibleNextMoves, commitMove, checkWinner, getMoveFromAI } from '../../abalon-api';\r\nimport { useSnackbar } from 'notistack';\r\nimport { CircularProgress, Typography, Box } from '@material-ui/core';\r\n\r\nconst TILE_SIZE = 25\r\nconst PADDING_SIZE_X = 10\r\nconst PADDING_SIZE_Y = 6\r\n\r\nconst mathFunction = (num) => {\r\n    if (num >=0 && num <= 4) {\r\n        return num\r\n    } else if (num >=5 && num <= 8) {\r\n        return 8 - num\r\n    }\r\n    return 0\r\n}\r\n\r\nconst mathFunction2 = (num) => {\r\n    switch (num) {\r\n        case 0: return 0\r\n        case 1: return 2\r\n        case 2: return 8\r\n        case 3: return 11\r\n        case 4: return 18\r\n        case 5: return 11\r\n        case 6: return 8\r\n        case 7: return 2\r\n        case 8: return 0\r\n        default: return 0\r\n    }\r\n}\r\n\r\nconst tilePositionToCoordinates = (row, column) => {\r\n    const rowOffset = (4 - mathFunction(row)) * 25 / 2 - mathFunction2(row)\r\n\r\n    return {\r\n        x: rowOffset + TILE_SIZE * column + PADDING_SIZE_X * column + 65,\r\n        y: TILE_SIZE * row + 38 + PADDING_SIZE_Y * row\r\n    }\r\n}\r\n\r\nconst BoardGame = props => {\r\n    const { againstAI } = props\r\n    const { abalonGameState, abalonGameDispatch } = useContext(AbalonGameContext)\r\n\r\n    const [blackBallImage] = useImage(blackBallURL)\r\n    const [whiteBallImage] = useImage(whiteBallURL)\r\n    const [blackBallYellowImage] = useImage(blackBallYellowURL)\r\n    const [whiteBallYellowImage] = useImage(whiteBallYellowURL)\r\n    const [backBoardImage] = useImage(backBoardURL)\r\n    const [emptyMarkedImage] = useImage(emptyMarkedURL)\r\n    const [whiteBallMarkedImage] = useImage(whiteBallMarkedURL)\r\n    const [blackBallMarkedImage] = useImage(blackBallMarkedURL)\r\n    \r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const [winnerAlreadyAnnounced, setWinnerAlreadyAnnounced] = useState(false)\r\n\r\n    const { selectedTileState } = abalonGameState\r\n    /**@type {AbalonGame} */\r\n    const abalonGame = abalonGameState.abalonGame\r\n    const boardState = abalonGame.board.getBoardState()\r\n    \r\n    /**\r\n     * @param {AbalonBoardTile} tile\r\n     */\r\n    const tileToImage = (tile) => {\r\n        switch (tile.content) {\r\n            case TileContent.WhiteSoldier:\r\n                return whiteBallImage\r\n            case TileContent.BlackSoldier:\r\n                return blackBallImage\r\n            case TileContent.BlackSoldierMarkedSelection:\r\n                return blackBallYellowImage\r\n            case TileContent.WhiteSoldierMarkedSelection:\r\n                return whiteBallYellowImage\r\n            case TileContent.EmptyMarkedAction:\r\n                return emptyMarkedImage\r\n            case TileContent.WhiteSoldierMarkedAction:\r\n                return whiteBallMarkedImage\r\n            case TileContent.BlackSoldierMarkedAction:\r\n                return blackBallMarkedImage\r\n            case TileContent.Empty:\r\n                return ''\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {import('konva/types/Node').KonvaEventObject<MouseEvent>} e \r\n     * @param {{row: Number, column: Number, tile: AbalonBoardTile}} tileState\r\n     * */\r\n    const handleTileClick = (e, tileState) => {\r\n        const { row, column, tile } = tileState\r\n        \r\n        if (selectedTileState === null) { // If first select\r\n            if ((tile.isBlackSoldier() && abalonGame.turn === Players.White) ||\r\n                (tile.isWhiteSoldier() && abalonGame.turn === Players.Black)) {\r\n                enqueueSnackbar(\"Mind the current turn!\")\r\n            }\r\n\r\n            // Fetch from server possible moves and add it to the action and state\r\n            getPossibleNextMoves(abalonGame.turn, { row, column }, abalonGame.board)\r\n                .then(nextMovesPositions => {\r\n                    abalonGameDispatch(gameFirstSelection(tileState, nextMovesPositions))\r\n                }).catch(err => {\r\n                    enqueueSnackbar(\"There has been an error reaching the server\", {\r\n                        variant: \"error\",\r\n                    })\r\n                })\r\n        } else { // If second select\r\n            // Check with state if the move is valid (compare the destination with possible moves in state)\r\n            if (abalonGameState.nextMovesPositions.find(pos => pos.row === row && pos.column === column)) {\r\n                // If it is, execute move with server and dispatch the new board \r\n                const sourcePosition = {\r\n                    row: abalonGameState.selectedTileState.row,\r\n                    column: abalonGameState.selectedTileState.column\r\n                }\r\n\r\n                commitMove(abalonGame.turn, sourcePosition, { row, column }, abalonGame.board)\r\n                    .then(newAbalonBoard => {\r\n                        abalonGameDispatch(gameCommitMove(newAbalonBoard, againstAI))\r\n                    })\r\n                    .catch(err => {\r\n                        enqueueSnackbar(\"There has been an error reaching the server\", {\r\n                            variant: \"error\",\r\n                        })\r\n                    })\r\n            } else {\r\n                abalonGameDispatch(gameResetSelection())\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!winnerAlreadyAnnounced) {\r\n            checkWinner(abalonGame.board, againstAI)\r\n                .then(player => {\r\n                    if ([Players.White, Players.Black].includes(player)) {\r\n                        enqueueSnackbar(`Player ${player} wins! You may continue playing if you want :-)`, {\r\n                            variant: \"success\",\r\n                        })\r\n                        setWinnerAlreadyAnnounced(true)\r\n                    }\r\n                })\r\n        }\r\n    }, [abalonGame.turn, againstAI, winnerAlreadyAnnounced])\r\n\r\n    useEffect(() => {\r\n        if (abalonGameState.isAITurn) {\r\n            getMoveFromAI(abalonGame.turn, abalonGame.board, 60 * 1000)\r\n                .then(newAbalonBoard => {\r\n                    abalonGameDispatch(gameAICommitMove(newAbalonBoard))\r\n                })\r\n        }\r\n    }, [abalonGameState.isAITurn])\r\n\r\n    return (\r\n        <div>\r\n            <Stage width={400} height={400}>\r\n                <Layer>\r\n                    <Image image={backBoardImage}  />\r\n                    {boardState.map(rowState => (\r\n                        rowState.map((tileState) => {\r\n                            const { x, y } = tilePositionToCoordinates(tileState.row, tileState.column) \r\n                            return (\r\n                                <Image \r\n                                    key={`${tileState.row} ${tileState.column}`}\r\n                                    image={tileToImage(tileState.tile)}\r\n                                    width={TILE_SIZE}\r\n                                    height={TILE_SIZE}\r\n                                    x={x}\r\n                                    y={y}\r\n                                    onClick={(e) => {\r\n                                        if (!abalonGameState.isAITurn) {\r\n                                            handleTileClick(e, tileState)\r\n                                        }\r\n                                    }}\r\n                                    onMouseEnter={(e) => {\r\n                                        if (tileState.tile.content !== TileContent.Empty) {\r\n                                            document.body.style.cursor = 'pointer'\r\n                                        }\r\n                                    }}\r\n                                    onMouseLeave={(e) => {\r\n                                        document.body.style.cursor = 'default'\r\n                                    }}\r\n                                />\r\n                            )\r\n                        })\r\n                    ))}\r\n                </Layer>\r\n            </Stage>\r\n            {\r\n                abalonGameState.isAITurn && (\r\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">\r\n                        <Typography variant=\"h4\" style={{ marginRight: 5 }}>\r\n                            AI is thinking\r\n                        </Typography>\r\n                        <CircularProgress color=\"secondary\" />\r\n                    </Box>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nBoardGame.propTypes = {\r\n\r\n}\r\n\r\nexport default BoardGame\r\n","import { GAME_FIRST_SELECTION, GAME_SECOND_SELECTION, GAME_RESET_SELECTION, GAME_COMMIT_MOVE, GAME_AI_COMMIT_MOVE } from \"./abalonGameTypes\"\r\n\r\n\r\nexport const gameFirstSelection = (tileState, nextMovesPositions) => {\r\n    return {\r\n        type: GAME_FIRST_SELECTION,\r\n        payload: { tileState, nextMovesPositions }\r\n    }\r\n}\r\n\r\nexport const gameCommitMove = (newAbalonBoard, againstAI) => {\r\n    return {\r\n        type: GAME_COMMIT_MOVE,\r\n        payload: { newAbalonBoard, againstAI }\r\n    }\r\n}\r\n\r\nexport const gameAICommitMove = (newAbalonBoard) => {\r\n    return {\r\n        type: GAME_AI_COMMIT_MOVE,\r\n        payload: newAbalonBoard\r\n    }\r\n}\r\n\r\nexport const gameSecondSelection = (tileState) => {\r\n    return {\r\n        type: GAME_SECOND_SELECTION,\r\n        payload: tileState\r\n    }\r\n}\r\n\r\nexport const gameResetSelection = () => {\r\n    return {\r\n        type: GAME_RESET_SELECTION\r\n    }\r\n}","export const GAME_FIRST_SELECTION = \"GAME_FIRST_SELECTION\"\r\nexport const GAME_SECOND_SELECTION = \"GAME_SECOND_SELECTION\"\r\nexport const GAME_RESET_SELECTION = \"GAME_RESET_SELECTION\"\r\nexport const GAME_COMMIT_MOVE = \"GAME_COMMIT_MOVE\"\r\nexport const GAME_AI_COMMIT_MOVE = \"GAME_AI_COMMIT_MOVE \"","export const AppRoutes = {\r\n    startPage: '/',\r\n    abalonGamePage: '/game',\r\n    abalonGamePageWithAI: '/game-ai'\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {Object} obj \r\n * @param {Object} prototype \r\n * @returns {Object}\r\n */\r\nexport const objectShallowClone = (obj, prototype = Object.prototype) => {\r\n    const copyObj = Object.create(prototype)\r\n    Object.assign(copyObj, obj)\r\n\r\n    return copyObj\r\n}","import { AbalonGame } from \"../../modules/abalon-game\"\r\nimport { GAME_FIRST_SELECTION, GAME_SECOND_SELECTION, GAME_RESET_SELECTION, GAME_COMMIT_MOVE, GAME_AI_COMMIT_MOVE } from \"./abalonGameTypes\"\r\nimport { objectShallowClone } from \"../../constants\"\r\n\r\n\r\n\r\nconst abalonGameInit = (initialBoardState) => {\r\n    return {\r\n        abalonGame: new AbalonGame(initialBoardState),\r\n        selectedTileState: null,\r\n        nextMovesPositions: [],\r\n        isAITurn: false,\r\n    }\r\n}\r\n\r\nconst abalonGameReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GAME_FIRST_SELECTION: {\r\n            const { tileState, nextMovesPositions } = action.payload\r\n            const { row, column, tile } = tileState\r\n            /**@type {AbalonGame} */\r\n            const abalonGameCopy = objectShallowClone(state.abalonGame, AbalonGame.prototype)\r\n            \r\n            abalonGameCopy.markTileSelected(row, column)\r\n\r\n            // Mark action to the possible moves \r\n            for (const position of nextMovesPositions) {\r\n                const { row, column } = position\r\n                abalonGameCopy.markTileAction(row, column)\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                abalonGame: abalonGameCopy,\r\n                selectedTileState: tileState,\r\n                nextMovesPositions,\r\n            }\r\n        }  \r\n        case GAME_COMMIT_MOVE: {\r\n            const { newAbalonBoard, againstAI } = action.payload\r\n            const { row, column } = state.selectedTileState\r\n\r\n            /**@type {AbalonGame} */\r\n            const abalonGameCopy = objectShallowClone(state.abalonGame, AbalonGame.prototype)\r\n\r\n            // Reset GUI\r\n            abalonGameCopy.unmarkTileSelected(row, column)\r\n\r\n            for (const position of state.nextMovesPositions) {\r\n                const { row, column } = position\r\n                abalonGameCopy.unmarkTileAction(row, column)\r\n            }\r\n\r\n            // Reload the board to the next board state\r\n            abalonGameCopy.board = newAbalonBoard\r\n\r\n            // Toggle Turn\r\n            abalonGameCopy.switchTurn()\r\n\r\n            return {\r\n                ...state,\r\n                abalonGame: abalonGameCopy,\r\n                selectedTileState: null,\r\n                nextMovesPositions: [],\r\n                isAITurn: againstAI,\r\n            }\r\n        }\r\n        case GAME_AI_COMMIT_MOVE: {\r\n            const newAbalonBoard = action.payload\r\n\r\n            /**@type {AbalonGame} */\r\n            const abalonGameCopy = objectShallowClone(state.abalonGame, AbalonGame.prototype)\r\n\r\n            // Reload the board to the next board state\r\n            abalonGameCopy.board = newAbalonBoard\r\n\r\n            // Toggle Turn\r\n            abalonGameCopy.switchTurn()\r\n\r\n            return {\r\n                ...state,\r\n                abalonGame: abalonGameCopy,\r\n                isAITurn: false,\r\n            }\r\n        }\r\n        case GAME_SECOND_SELECTION: {\r\n            const tileState = action.payload\r\n            const { row, column, tile } = tileState\r\n            const firstTileState = state.selectedTileState\r\n            /**@type {AbalonGame} */\r\n            const abalonGameCopy = objectShallowClone(state.abalonGame, AbalonGame.prototype)\r\n            \r\n            return {\r\n                ...state,\r\n                abalonGame: abalonGameCopy,\r\n                selectedTileState: tileState,\r\n            }\r\n        }\r\n        case GAME_RESET_SELECTION: {\r\n            /**@type {AbalonGame} */\r\n            const abalonGameCopy = objectShallowClone(state.abalonGame, AbalonGame.prototype)\r\n            const { row, column } = state.selectedTileState\r\n\r\n            abalonGameCopy.unmarkTileSelected(row, column)\r\n\r\n            // Unmark action of all the action marked tiles\r\n            for (const position of state.nextMovesPositions) {\r\n                const { row, column } = position\r\n                abalonGameCopy.unmarkTileAction(row, column)\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                abalonGame: abalonGameCopy,\r\n                selectedTileState: null,\r\n                nextMovesPositions: [],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport {\r\n    abalonGameInit,\r\n    abalonGameReducer\r\n}","import { TileContent, AbalonBoardTile } from \"../../modules/abalon-game\"\r\n\r\nconst initialTiles = [\r\n    // row 0\r\n    {row: 0, column: 0, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 0, column: 1, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 0, column: 2, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 0, column: 3, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 0, column: 4, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n\r\n    // row 1\r\n    {row: 1, column: 0, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 1, column: 1, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 1, column: 2, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 1, column: 3, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 1, column: 4, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 1, column: 5, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n\r\n    // row 2\r\n    {row: 2, column: 0, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 1, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 2, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 3, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 4, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 5, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    {row: 2, column: 6, tile: new AbalonBoardTile(TileContent.WhiteSoldier)},\r\n    \r\n    // row 3\r\n    {row: 3, column: 0, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 1, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 2, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 3, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 4, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 5, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 6, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 3, column: 7, tile: new AbalonBoardTile(TileContent.Empty)},\r\n\r\n    // row 4\r\n    {row: 4, column: 0, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 1, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 2, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 3, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 4, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 5, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 6, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 7, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 4, column: 8, tile: new AbalonBoardTile(TileContent.Empty)},\r\n\r\n    // row 5\r\n    {row: 5, column: 0, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 1, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 2, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 3, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 4, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 5, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 6, tile: new AbalonBoardTile(TileContent.Empty)},\r\n    {row: 5, column: 7, tile: new AbalonBoardTile(TileContent.Empty)},\r\n\r\n    // row 6\r\n    {row: 6, column: 0, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 1, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 2, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 3, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 4, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 5, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 6, column: 6, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n\r\n    // row 7\r\n    {row: 7, column: 0, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 7, column: 1, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 7, column: 2, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 7, column: 3, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 7, column: 4, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 7, column: 5, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n\r\n    // row 8\r\n    {row: 8, column: 0, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 8, column: 1, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 8, column: 2, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 8, column: 3, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n    {row: 8, column: 4, tile: new AbalonBoardTile(TileContent.BlackSoldier)},\r\n]\r\n\r\nexport {\r\n    initialTiles\r\n}","import React, { useReducer } from 'react'\r\nimport BoardGame from '../BoardGame/BoardGame'\r\nimport { abalonGameReducer, abalonGameInit } from '../../reducers/abalonGame/abalonGameReducer'\r\nimport { AbalonGame, Players } from '../../modules/abalon-game'\r\nimport { initialTiles } from './initialBoardState'\r\nimport { makeStyles, Typography, Divider } from '@material-ui/core'\r\n\r\nexport const AbalonGameContext = React.createContext()\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageTitle: {\r\n        color: \"#E4A148\",\r\n        fontFamily: \"Luminari, fantasy\",\r\n    },\r\n    turnHeader: {\r\n        color: '#BCD39C',\r\n        fontSize: 20,\r\n        fontFamily: \"Luminari, fantasy\",\r\n        position: 'relative',\r\n        right: 5\r\n    },\r\n    appBar: {\r\n        // borderWidth: 1,\r\n        // borderColor: '#E4A148',\r\n        // borderStyle: 'solid',\r\n        // borderTop: 'none',\r\n        // borderLeft: 'none',\r\n        // borderRight: 'none',\r\n        // position: 'relative',\r\n        // left: 15,\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'baseline'\r\n    },\r\n    containerBox: {\r\n        height: '100vh'\r\n    },\r\n    boxButton: {\r\n        background: '#BCD39C',\r\n        color: 'white',\r\n        marginTop: 3,\r\n        marginBottom: 3,\r\n    }\r\n}))\r\n\r\nconst AbalonGamePage = props => {\r\n    const { initialBoardState = initialTiles, againstAI = false } = props\r\n    const [abalonGameState, abalonGameDispatch] = useReducer(abalonGameReducer, initialBoardState, abalonGameInit)\r\n\r\n    /**@type {AbalonGame} */\r\n    const abalonGame = abalonGameState.abalonGame\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <AbalonGameContext.Provider value={{ abalonGameState, abalonGameDispatch }}>\r\n            <div>\r\n                <div className={classes.appBar}>\r\n                    <span style={{ flexGrow: 1 }}>\r\n                        <h1 className={classes.pageTitle}>\r\n                            Game Is In Session\r\n                        </h1>\r\n                    </span>\r\n                    <Typography className={classes.turnHeader}>\r\n                        Up Next: {abalonGame.turn === Players.White ? 'White': 'Black'}\r\n                    </Typography>\r\n                </div>\r\n                <Divider style={{ marginBottom: 20 }} />\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <BoardGame againstAI={againstAI} />\r\n                </div>\r\n            </div>\r\n        </AbalonGameContext.Provider>\r\n    )\r\n}\r\nAbalonGamePage.propTypes = {\r\n\r\n}\r\n\r\nexport default AbalonGamePage\r\n","import React, { useState } from 'react'\r\nimport { Box, makeStyles, Typography, Divider, Button, Dialog } from \"@material-ui/core\";\r\nimport { Link } from 'react-router-dom';\r\nimport { AppRoutes } from '../../constants';\r\nimport { instructionsURL, instructions2URL } from '../../assets';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    boxTitle: {\r\n        color: \"#E4A148\",\r\n        fontFamily: \"Luminari, fantasy\",\r\n    },\r\n    boxSubHeader: {\r\n        color: '#BCD39C',\r\n        fontSize: 20,\r\n        fontFamily: \"Luminari, fantasy\",\r\n    },\r\n    boxContent: {\r\n        borderWidth: 1,\r\n        borderRadius: 3,\r\n        borderColor: '#E4A148',\r\n        borderStyle: 'double',\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        paddingLeft: 20,\r\n        paddingRight: 20\r\n    },\r\n    containerBox: {\r\n        height: '100vh'\r\n    },\r\n    boxButton: {\r\n        background: '#BCD39C',\r\n        color: 'white',\r\n        marginTop: 3,\r\n        marginBottom: 3,\r\n    }\r\n}))\r\n\r\nconst StartPage = props => {\r\n    const [isInstructionsDialogOpen, setIsInstructionsDialogOpen] = useState(false)\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <>\r\n            <Dialog \r\n                fullScreen \r\n                onClose={() => setIsInstructionsDialogOpen(false)} \r\n                aria-labelledby=\"simple-dialog-title\" \r\n                open={isInstructionsDialogOpen}\r\n            >\r\n                <Button \r\n                    onClick={() => setIsInstructionsDialogOpen(false)}\r\n                    className={classes.boxButton}\r\n                >\r\n                    Back\r\n                </Button>\r\n                <img src={instructionsURL} />\r\n                <img src={instructions2URL} />\r\n            </Dialog>\r\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\"\r\n                className={classes.containerBox}\r\n            >\r\n                <Box className={classes.boxContent}>\r\n                    <Typography variant=\"h3\" className={classes.boxTitle}>\r\n                        Abalon Game\r\n                    </Typography>\r\n                    <Divider style={{marginBottom: 20}} />\r\n                    <Typography variant=\"caption\" className={classes.boxSubHeader}>\r\n                        Good luck beating this AI\r\n                    </Typography>\r\n                    <Box display=\"flex\" flexDirection=\"column\">\r\n                        <Button\r\n                            className={classes.boxButton}\r\n                            onClick={e => {\r\n                                document.getElementById(\"gotoGameBtn\").click()\r\n                            }}\r\n                        >\r\n                            Play Against Each Other\r\n                        </Button>\r\n                        <Link id=\"gotoGameBtn\" to={AppRoutes.abalonGamePage} />\r\n                        <Button\r\n                            className={classes.boxButton}\r\n                            onClick={e => {\r\n                                document.getElementById(\"gotoGameBtn2\").click()\r\n                            }}\r\n                        >\r\n                            Test Our AI\r\n                        </Button>\r\n                        <Link id=\"gotoGameBtn2\" to={AppRoutes.abalonGamePageWithAI} />\r\n                        <Button\r\n                            className={classes.boxButton}\r\n                            onClick={e => {\r\n                                setIsInstructionsDialogOpen(true)\r\n                            }}\r\n                        >\r\n                            Game Rules\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Box>        \r\n        </>\r\n    )\r\n}\r\n\r\nStartPage.propTypes = {\r\n\r\n}\r\n\r\nexport default StartPage\r\n","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport AbalonGamePage from './components/AbalonGamePage/AbalonGamePage'\nimport StartPage from './components/StartPage/StartPage'\nimport { AppRoutes } from './constants'\nimport { SnackbarProvider } from 'notistack'\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={2}>\n      <Router>\n        <Switch>\n          <Route exact path={AppRoutes.startPage} render={(props) => <StartPage {...props} />} />\n          <Route exact path={AppRoutes.abalonGamePage} render={(props) => <AbalonGamePage {...props} againstAI={false} />} />\n          <Route exact path={AppRoutes.abalonGamePageWithAI} render={(props) => <AbalonGamePage {...props} againstAI={true} />} />\n        </Switch>\n      </Router>\n    </SnackbarProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/empty-marked.5e7db21a.png\";","module.exports = __webpack_public_path__ + \"static/media/black-ball.6bcb523e.png\";","module.exports = __webpack_public_path__ + \"static/media/black-marked.1a94884f.png\";","module.exports = __webpack_public_path__ + \"static/media/black-ball-light-yellow.7d77d272.png\";","module.exports = __webpack_public_path__ + \"static/media/white-ball.2c4ecebf.png\";","module.exports = __webpack_public_path__ + \"static/media/white-marked.9ec9779c.png\";","module.exports = __webpack_public_path__ + \"static/media/white-ball-light-yellow.0399190f.png\";","module.exports = __webpack_public_path__ + \"static/media/back-board.b452512b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/instructions.8e561df1.png\";","module.exports = __webpack_public_path__ + \"static/media/instructions2.c89165a4.png\";"],"sourceRoot":""}